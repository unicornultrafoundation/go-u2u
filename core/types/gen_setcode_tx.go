// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/unicornultrafoundation/go-u2u/common"
	"github.com/unicornultrafoundation/go-u2u/common/hexutil"
)

var _ = (*setCodeTxMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SetCodeTx) MarshalJSON() ([]byte, error) {
	type SetCodeTx struct {
		ChainID           *hexutil.Big
		Nonce             hexutil.Uint64
		GasTipCap         *hexutil.Big
		GasFeeCap         *hexutil.Big
		Gas               hexutil.Uint64
		To                *common.Address `rlp:"nil"`
		Value             *hexutil.Big
		Data              hexutil.Bytes
		AccessList        AccessList
		AuthorizationList AuthorizationList
		V                 *hexutil.Big `json:"v" gencodec:"required"`
		R                 *hexutil.Big `json:"r" gencodec:"required"`
		S                 *hexutil.Big `json:"s" gencodec:"required"`
	}
	var enc SetCodeTx
	enc.ChainID = (*hexutil.Big)(s.ChainID)
	enc.Nonce = hexutil.Uint64(s.Nonce)
	enc.GasTipCap = (*hexutil.Big)(s.GasTipCap)
	enc.GasFeeCap = (*hexutil.Big)(s.GasFeeCap)
	enc.Gas = hexutil.Uint64(s.Gas)
	enc.To = s.To
	enc.Value = (*hexutil.Big)(s.Value)
	enc.Data = s.Data
	enc.AccessList = s.AccessList
	enc.AuthorizationList = s.AuthorizationList
	enc.V = (*hexutil.Big)(s.V)
	enc.R = (*hexutil.Big)(s.R)
	enc.S = (*hexutil.Big)(s.S)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SetCodeTx) UnmarshalJSON(input []byte) error {
	type SetCodeTx struct {
		ChainID           *hexutil.Big
		Nonce             *hexutil.Uint64
		GasTipCap         *hexutil.Big
		GasFeeCap         *hexutil.Big
		Gas               *hexutil.Uint64
		To                *common.Address `rlp:"nil"`
		Value             *hexutil.Big
		Data              *hexutil.Bytes
		AccessList        *AccessList
		AuthorizationList *AuthorizationList
		V                 *hexutil.Big `json:"v" gencodec:"required"`
		R                 *hexutil.Big `json:"r" gencodec:"required"`
		S                 *hexutil.Big `json:"s" gencodec:"required"`
	}
	var dec SetCodeTx
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID != nil {
		s.ChainID = (*big.Int)(dec.ChainID)
	}
	if dec.Nonce != nil {
		s.Nonce = uint64(*dec.Nonce)
	}
	if dec.GasTipCap != nil {
		s.GasTipCap = (*big.Int)(dec.GasTipCap)
	}
	if dec.GasFeeCap != nil {
		s.GasFeeCap = (*big.Int)(dec.GasFeeCap)
	}
	if dec.Gas != nil {
		s.Gas = uint64(*dec.Gas)
	}
	if dec.To != nil {
		s.To = dec.To
	}
	if dec.Value != nil {
		s.Value = (*big.Int)(dec.Value)
	}
	if dec.Data != nil {
		s.Data = *dec.Data
	}
	if dec.AccessList != nil {
		s.AccessList = *dec.AccessList
	}
	if dec.AuthorizationList != nil {
		s.AuthorizationList = *dec.AuthorizationList
	}
	if dec.V == nil {
		return errors.New("missing required field 'v' for SetCodeTx")
	}
	s.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for SetCodeTx")
	}
	s.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for SetCodeTx")
	}
	s.S = (*big.Int)(dec.S)
	return nil
}
